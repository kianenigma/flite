searchState.loadedDescShard("pallet_bags_list", 0, "Made with <em>Substrate</em>, for <em>Polkadot</em>.\nA Bag is a doubly-linked list of ids, where each id is …\nA duplicate id has been detected.\nThe <strong>ONLY</strong> entry point of this module. All operations to the …\nA Node is the fundamental element comprising the …\nGiven node id was not found.\nAn Id does not have a greater score than another Id.\nAttempted to place node in front of a node in another bag.\nIn this example, assuming each node has an equal id and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a node by id.\nGet the score of the given node,\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> when this voter is in the wrong bag.\nMigrate the list from one set of thresholds to another.\nThe migrations of this pallet.\nGiven a certain score, to which bag does it belong to?\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nGet the underlying voter (public fo tests).\nIterate over the nodes in this bag (public for tests).\nRegenerate all of the data from the given ids.\nAutogenerated weights for <code>pallet_bags_list</code>\nA struct that migrates all bags lists to contain a score …\nA struct that does not migration, but only checks that the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe list of thresholds separating the various bags.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\n<code>Instance1</code> to be used for instantiable pallets defined with …\nA error in the list interface implementation.\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe <code>Pallet</code> struct, the main type that implements traits …\nMoved an account from one bag to another.\nThe overarching event type.\nThe type used to dictate a node position relative to other …\nSomething that provides the scores of ids.\nUpdated the score of some account to the given amount.\nWeight information for extrinsics in this pallet.\nAuto-generated docs-only module listing all defined …\nMove an account from one bag to another, depositing an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEquivalent to <code>ListBags::get</code>, but public. Useful for tests …\nCreate a call with the variant <code>put_in_front_of</code>.\nCreate a call with the variant <code>put_in_front_of_other</code>.\nCreate a call with the variant <code>rebag</code>.\nMove the caller’s Id directly in front of <code>lighter</code>.\nMove the caller’s Id directly in front of <code>lighter</code>.\nSame as <code>Pallet::put_in_front_of</code>, but it can be called by …\nSame as <code>Pallet::put_in_front_of</code>, but it can be called by …\nDeclare that some <code>dislocated</code> account has, through rewards …\nDeclare that some <code>dislocated</code> account has, through rewards …\nAuto-generated docs-only module listing all (public and …\nMove the caller’s Id directly in front of <code>lighter</code>.\nSame as <code>Pallet::put_in_front_of</code>, but it can be called by …\nDeclare that some <code>dislocated</code> account has, through rewards …\nA bag stored in storage.\nA single node, within some bag.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_bags_list</code> using the Substrate node and …\nWeight functions needed for <code>pallet_bags_list</code>.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>VoterList::ListNodes</code> (r:4 w:4) Proof: …\nStorage: <code>Staking::Bonded</code> (r:1 w:0) Proof: <code>Staking::Bonded</code> (…\nStorage: <code>Staking::Bonded</code> (r:1 w:0) Proof: <code>Staking::Bonded</code> (…")