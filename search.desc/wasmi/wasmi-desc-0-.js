searchState.loadedDescShard("wasmi", 0, "The Wasmi virtual machine definitions.\nA trait used to get shared access to a <code>Store</code> in Wasmi.\nA trait used to get exclusive access to a <code>Store</code> in Wasmi.\nRepresents the caller’s context when creating a host …\nThe chosen mode of Wasm to Wasmi bytecode compilation.\nConfiguration for an <code>Engine</code>.\nThe value of the global variable is a constant.\nThe user state associated with the <code>Store</code>, aka the <code>T</code> in …\nThe Wasm code is compiled eagerly to Wasmi bytecode.\nStores customizable limits for the <code>Engine</code> when parsing or …\nThe Wasmi interpreter.\nA weak reference to an <code>Engine</code>.\nThe generic Wasmi root error type.\nAn exported WebAssembly value.\nA descriptor for an exported WebAssembly value of a <code>Module</code>.\nAn iterator over the <code>Extern</code> declarations of an <code>Instance</code>.\nAn external item to a WebAssembly module.\nRepresents a nullable opaque reference to any data within …\nA nullable external object reference, a.k.a. <code>ExternRef</code>.\nThe type of an <code>Extern</code> item.\nValue of 32-bit IEEE 754-2008 floating point number.\nValue of 64-bit IEEE 754-2008 floating point number.\nThe resumable call has finished properly and returned a …\nThe resumable call has finished properly and returned a …\nA Wasm or host function reference.\nA WebAssembly function which can be called.\nThe type of an <code>Extern::Func</code>.\nA nullable <code>Func</code> reference.\nA nullable <code>Func</code> reference, a.k.a. <code>FuncRef</code>.\nA function type representing a function’s parameter and …\nA Wasm global variable reference.\nA WebAssembly global which acts like a <code>Cell&lt;T&gt;</code> of sorts, …\nThe type of an <code>Extern::Global</code>.\nThe type of a global variable.\nValue of 32-bit signed or unsigned integer.\nValue of 64-bit signed or unsigned integer.\nA descriptor for an imported value into a Wasm <code>Module</code>.\nAn instantiated WebAssembly <code>Module</code>.\nA partially instantiated <code>Instance</code> where the <code>start</code> function …\nClosures and functions that can be used as host functions.\nThe Wasm code is validated and translated lazily on first …\nThe Wasm code is validated eagerly and translated lazily …\nA linker used to define module imports and instantiate …\nA linker used to define module imports and instantiate …\nA Wasm linear memory reference.\nA WebAssembly linear memory.\nThe type of an <code>Extern::Memory</code>.\nThe memory type of a linear memory.\nA parsed and validated WebAssembly module.\nAn iterator over the exports of a <code>Module</code>.\nAn iterator over the imports of a <code>Module</code>.\nThe mutability of a global variable.\nTypes implementing this trait act as byte streams.\nUsed by hosts to limit resource consumption of instances.\nThe resumable call encountered a host error and can be …\nThe resumable call encountered a host error and can be …\nReturned by calling a <code>Func</code> in a resumable way.\nState required to resume a <code>Func</code> invocation.\nThe configured limits of the Wasm stack.\nThe store that owns all data associated to Wasm modules.\nA temporary handle to a <code>&amp;Store&lt;T&gt;</code>.\nA temporary handle to a <code>&amp;mut Store&lt;T&gt;</code>.\nProvides limits for a <code>Store</code>.\nUsed to build <code>StoreLimits</code>.\nA Wasm table reference.\nA WebAssembly table which is an array of function …\nThe type of an <code>Extern::Table</code>.\nA descriptor for a <code>Table</code> instance.\nA typed <code>Func</code> instance.\nReturned by calling a <code>TypedFunc</code> in a resumable way.\nState required to resume a <code>TypedFunc</code> invocation.\nRuntime representation of a Wasm value.\nThe value of the global variable is mutable.\nThe typed parameters of a <code>TypedFunc</code>.\nThe typed results of a <code>TypedFunc</code>.\nTypes and type sequences that can be used as return values …\nTypes that can be used as parameters or results of host …\nA list of <code>WasmTy</code> types.\nReturns the store context that this type provides access …\nReturns the store context that this type provides access …\nReturns a reference to <code>TrapCode</code> if <code>Error</code> is a <code>TrapCode</code>.\nConsumes this builder and returns the <code>StoreLimits</code>.\nCreates a new <code>LinkerBuilder</code> to construct a <code>Linker</code>.\nCalls this Wasm or host function with the specified …\nCalls the Wasm or host function with the given inputs.\nCalls this Wasm or host function with the specified …\nCalls the Wasm or host function with the given inputs.\nSets the <code>CompilationMode</code> used for the <code>Engine</code>.\nReturns a shared reference to the <code>Config</code> of the <code>Engine</code>.\nConfigures whether Wasmi will consume fuel during …\nReturns the <code>ValType</code> of the global variable.\nCopy <code>len</code> elements from <code>src_table[src_index..]</code> into …\nFinishes construction of the <code>Linker</code> by attaching an <code>Engine</code>.\nReturns the amount of pages in use by the linear memory.\nReturns a shared reference to the user provided host data.\nReturns a shared reference to the underlying data for this …\nReturns a shared slice to the bytes underlying the <code>Memory</code>.\nReturns a shared reference to the user provided data owned …\nAccess the underlying data owned by this store.\nAccess the underlying data owned by this store.\nReturns an exclusive slice to the bytes underlying the …\nReturns an exclusive reference to the user provided host …\nReturns an exclusive slice to the bytes underlying the …\nReturns an exclusive reference to the user provided data …\nAccess the underlying data owned by this store.\nCreates new default value of given type.\nDefine a new item in this <code>Linker</code>.\nConsumes <code>self</code> to downcast the <code>Error</code> into the <code>T: HostError</code> …\nDowncasts the <code>Error</code> into the <code>T: HostError</code> if possible.\nDowncasts the <code>Error</code> into the <code>T: HostError</code> if possible.\nReturns the <code>ValType</code> of elements stored in the <code>Table</code>.\nSets the <code>EnforcedLimits</code> enforced by the <code>Engine</code> for Wasm …\nReturns a shared reference to the used <code>Engine</code>.\nReturns the underlying <code>Engine</code> of the <code>Linker</code>.\nReturns the <code>Engine</code> used during creation of the <code>Module</code>.\nReturns the <code>Engine</code> that this store is associated with.\nReturns the underlying <code>Engine</code> this store is connected to.\nReturns the underlying <code>Engine</code> this store is connected to.\nFinishes instantiation ensuring that no <code>start</code> function …\nDefines some errors that may occur upon interaction with …\nReturns an iterator over the exports of the <code>Instance</code>.\nReturns an iterator over the exports of the <code>Module</code>.\nReturns the underlying <code>externref</code> if the type matches …\nReturns the underlying <code>f32</code> if the type matches otherwise …\nReturns the underlying <code>f64</code> if the type matches otherwise …\nFill <code>table[dst..(dst + len)]</code> with the given value.\nSignals that the <code>LinkerBuilder</code> is now ready to create new …\nEnable or disable Wasm floating point (<code>f32</code> and <code>f64</code>) …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the underlying <code>Func</code>.\nReturns the inner <code>Func</code> if <code>FuncRef</code> is not <code>null</code>.\nReturns the underlying <code>FuncType</code> or <code>None</code> if it is of a …\nCreates a new named <code>Func::new</code>-style host <code>Func</code> for this …\nCreates a new named <code>Func::new</code>-style host <code>Func</code> for this …\nCreates a new named <code>Func::new</code>-style host <code>Func</code> for this …\nCreates a new named <code>Func::new</code>-style host <code>Func</code> for this …\nReturns the underlying <code>funcref</code> if the type matches …\nReturns the current value of the global variable.\nLooks up a defined <code>Extern</code> by name in this <code>Linker</code>.\nReturns the <code>Table</code> element value at <code>index</code>.\nQueries the caller for an exported definition identifier …\nReturns the value exported to the given <code>name</code> if any.\nLooks up an export in this <code>Module</code> by its <code>name</code>.\nReturns the remaining fuel of the <code>Store</code> if fuel metering …\nReturns the remaining fuel of the <code>Store</code> if fuel metering …\nReturns the remaining fuel of the <code>Store</code> if fuel metering …\nReturns the remaining fuel of the <code>Store</code> if fuel metering …\nLooks up an exported <code>Func</code> value by <code>name</code>.\nLooks up an exported <code>Global</code> value by <code>name</code>.\nLooks up an exported <code>Memory</code> value by <code>name</code>.\nLooks up an exported <code>Table</code> value by <code>name</code>.\nLooks up an exported <code>Func</code> value by <code>name</code>.\nReturns the underlying <code>GlobalType</code> or <code>None</code> if it is of a …\nGrows the linear memory by the given amount of new pages.\nGrows the table by the given amount of elements.\nCreates a custom <code>HostError</code>.\nReturns a shared reference to the encountered host error.\nReturns the host <code>Func</code> that returned the host error.\nReturns the underlying <code>i32</code> if the type matches otherwise …\nCreates a new <code>Error</code> representing an explicit program exit …\nReturns the classic <code>i32</code> exit program code of a <code>Trap</code> if any.\nReturns the underlying <code>i64</code> if the type matches otherwise …\nReturns an iterator over the imports of the <code>Module</code>.\nReturns the initial pages of the memory type.\nThe initial value stack height that the Wasm stack …\nThe maximum number of instances that can be created for a …\nThe maximum number of instances that can be created for a …\nThe maximum number of instances that can be created for a …\nInstantiates the given <code>Module</code> using the definitions in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes <code>self</code> and returns its user provided data.\nConsume this <code>Export</code> and return the underlying <code>Extern</code>.\nReturns the underlying function if <code>self</code> is a function.\nReturns the underlying <code>Func</code>, if the <code>Export</code> is a function …\nReturns the underlying global variable if <code>self</code> is a global …\nReturns the underlying <code>Global</code>, if the <code>Export</code> is a global …\nReturns the underlying linear memory if <code>self</code> is a linear …\nReturns the underlying <code>Memory</code>, if the <code>Export</code> is a linear …\nReturns the underlying table if <code>self</code> is a table.\nReturns the underlying <code>Table</code>, if the <code>Export</code> is a table or …\nReturns <code>true</code> if this mutability is <code>Mutability::Const</code>.\nReturns <code>true</code> if this mutability is <code>Mutability::Var</code>.\nReturns <code>true</code> if <code>ExternRef</code> is <code>null</code>.\nReturns <code>true</code> if <code>FuncRef</code> is <code>null</code>.\nReturns the <code>ErrorKind</code> of the <code>Error</code>.\nReturns the number of result types of the function type.\nInstalls a function into the <code>Store</code> that will be called …\nThe optional maximum number of elements the <code>Table</code> can have.\nReturns the maximum pages of the memory type.\nThe maximum number of nested calls that the Wasm stack …\nThe maximum value stack height in use that the Wasm stack …\nThe maximum number of linear memories that can be created …\nThe maximum number of linear memories that can be created …\nThe maximum number of linear memories that can be created …\nReturns the underlying <code>MemoryType</code> or <code>None</code> if it is of a …\nNotifies the resource limiter that growing a linear …\nNotifies the resource limiter that growing a linear …\nNotifies the resource limiter that an instance’s linear …\nThe maximum number of bytes a linear memory can grow to.\nReturns minimum number of elements the <code>Table</code> must have.\nReturns the module import name.\nReturns the <code>Mutability</code> of the global variable.\nReturns the name by which this export is known.\nReturns the name by which the export is known.\nReturns the field import name.\nCreates a new <code>StoreLimitsBuilder</code>.\nCreates a new <code>StackLimits</code> configuration.\nCreates a new <code>Engine</code> with default configuration.\nCreates a new <code>Error</code> described by a <code>message</code>.\nCreates a new <code>ExternRef</code> wrapping the given value.\nCreates a new <code>FuncType</code>.\nCreates a new <code>FuncRef</code>.\nCreates a new <code>Func</code> with the given arguments.\nCreates a new <code>GlobalType</code> from the given <code>ValType</code> and …\nCreates a new global variable to the store.\nCreates a new <code>Linker</code>.\nCreates a new memory type with initial and optional …\nCreates a new linear memory to the store.\nCreates a new Wasm <code>Module</code> from the given Wasm bytecode …\nCreates a new store.\nCreates a new <code>TableType</code>.\nCreates a new table to the store.\nCreates a new linear memory to the store.\nCreates a new Wasm <code>Module</code> from the given Wasm bytecode …\nCreates a new Wasm <code>Module</code> from the given byte stream.\nCreates a new Wasm <code>Module</code> from the given Wasm bytecode …\nCreates a new <code>ExternRef</code> which is <code>null</code>.\nCreates a <code>null</code> <code>FuncRef</code>.\nReturns the parameter types of the function type.\nPull some bytes from this source into the specified …\nReads <code>n</code> bytes from <code>memory[offset..offset+n]</code> into <code>buffer</code> …\nReturns the result types of the function type.\nResumes the call to the <code>TypedFunc</code> with the given inputs.\nResumes the call to the <code>Func</code> with the given inputs.\nReturns <code>true</code> if both <code>Engine</code> references <code>a</code> and <code>b</code> refer to …\nSets a new value to the global variable.\nSets the <code>Val</code> of this <code>Table</code> at <code>index</code>.\nSets the maximum amount of cached stacks for reuse for the …\nSets the remaining fuel of the <code>Store</code> to <code>value</code> if fuel …\nSets the remaining fuel of the <code>Store</code> to <code>value</code> if fuel …\nSets the remaining fuel of the <code>Store</code> to <code>value</code> if fuel …\nSets the <code>StackLimits</code> for the <code>Config</code>.\nReturns the current size of the <code>Table</code>.\nRuns the <code>start</code> function of the <code>Instance</code> and returns its …\nContains type states for the <code>LinkerBuilder</code> construction …\nA strict set of limits that makes use of Wasmi …\nReturns the underlying <code>TableType</code> or <code>None</code> if it is of a …\nThe maximum number of elements in a table.\nNotifies the resource limiter that growing a linear …\nNotifies the resource limiter that growing a linear …\nNotifies the resource limiter that an instance’s table …\nThe maximum number of tables that can be created for a …\nThe maximum number of tables that can be created for a …\nThe maximum number of tables that can be created for a …\nIndicates that a trap should be raised whenever a growth …\nReturns the function type of the <code>Func</code>.\nReturns the <code>GlobalType</code> of the global variable.\nReturns the type associated with this <code>Extern</code>.\nReturn the <code>ExternType</code> of this export.\nReturns the memory type of the linear memory.\nReturns the type of the exported item.\nReturns the import item type.\nReturns the type and limits of the table.\nGet variable type for this value.\nCreates a new <code>TypedFunc</code> from this <code>Func</code>.\nUpgrades the <code>EngineWeak</code> to an <code>Engine</code>.\nValidates <code>wasm</code> as a WebAssembly binary given the …\nEnable or disable the <code>bulk-memory</code> Wasm proposal for the …\nEnable or disable the <code>extended-const</code> Wasm proposal for the …\nEnable or disable the <code>multi-value</code> Wasm proposal for the …\nEnable or disable the <code>mutable-global</code> Wasm proposal for the …\nEnable or disable the <code>reference-types</code> Wasm proposal for …\nEnable or disable the <code>saturating-float-to-int</code> Wasm …\nEnable or disable the <code>sign-extension</code> Wasm proposal for the …\nEnable or disable the <code>tail-call</code> Wasm proposal for the …\nCreates an <code>EngineWeak</code> from the given <code>Engine</code>.\nCreates a new host function from the given closure.\nWrites <code>n</code> bytes to <code>memory[offset..offset+n]</code> from <code>buffer</code> …\nAttempted to make an invalid conversion to an integer type.\nAttempt to invoke a function with mismatching signature.\nTuple types that allow to decode a slice of <code>UntypedVal</code>.\nTuple types that allow to encode a slice of <code>UntypedVal</code>.\nA nullable external reference.\nA NaN preserving <code>f32</code> type.\n32-bit IEEE 754-2008 floating point number.\nA NaN preserving <code>f64</code> type.\n64-bit IEEE 754-2008 floating point number.\nA nullable function reference.\nThis trap is raised when a growth operation was attempted …\nTrait that allows the host to return custom error.\n32-bit signed or unsigned integer.\n64-bit signed or unsigned integer.\nIndicates that a <code>call_indirect</code> instruction called a …\nAttempt to divide by zero.\nAn integer arithmetic operation caused an overflow.\nThe <code>UntypedVal</code> slice length did not match <code>Self</code>.\nAttempt to load or store at the address which lies outside …\nThis trap is raised when a WebAssembly execution ran out …\nAn amount of linear memory pages.\nStack overflow.\nAttempt to access table element at index which lies …\nError type which can be returned by Wasm code or by the …\nError type which can be thrown by wasm code or by host …\nWasm code executed <code>unreachable</code> opcode.\nAn error that may occur upon encoding or decoding slices …\nAn untyped value.\nType of a value.\nReturns the absolute value of the float.\nReturns the absolute value of the float.\nAdds the given amount of pages to <code>self</code>.\nSubstracts the given amount of pages from <code>self</code>.\nDecodes the slice of <code>UntypedVal</code> as a value of type <code>T</code>.\nDecodes the slice of <code>UntypedVal</code> as a value of type <code>Self</code>.\nReturns a boxed object from a boxed trait object if the …\nConsumes <code>self</code> to downcast the <code>Trap</code> into the <code>T: HostError</code> …\nReturns a mutable reference to the object within the trait …\nDowncasts the <code>Trap</code> into the <code>T: HostError</code> if possible.\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nDowncasts the <code>Trap</code> into the <code>T: HostError</code> if possible.\nEncodes the slice of <code>UntypedVal</code> from the given value of …\nEncodes the slice of <code>UntypedVal</code> from the given value of …\nExecute <code>f32.abs</code> Wasm operation.\nExecute <code>f32.add</code> Wasm operation.\nExecute <code>f32.ceil</code> Wasm operation.\nExecute <code>f32.convert_i32_s</code> Wasm operation.\nExecute <code>f32.convert_i32_u</code> Wasm operation.\nExecute <code>f32.convert_i64_s</code> Wasm operation.\nExecute <code>f32.convert_i64_u</code> Wasm operation.\nExecute <code>f32.copysign</code> Wasm operation.\nExecute <code>f32.demote_f64</code> Wasm operation.\nExecute <code>f32.div</code> Wasm operation.\nExecute <code>f32.eq</code> Wasm operation.\nExecute <code>f32.floor</code> Wasm operation.\nExecute <code>f32.ge</code> Wasm operation.\nExecute <code>f32.gt</code> Wasm operation.\nExecute <code>f32.le</code> Wasm operation.\nExecutes the <code>f32.load</code> Wasm operation.\nExecute <code>f32.lt</code> Wasm operation.\nExecute <code>f32.max</code> Wasm operation.\nExecute <code>f32.min</code> Wasm operation.\nExecute <code>f32.mul</code> Wasm operation.\nExecute <code>f32.ne</code> Wasm operation.\nExecute <code>f32.nearest</code> Wasm operation.\nExecute <code>f32.neg</code> Wasm operation.\nExecute <code>f32.sqrt</code> Wasm operation.\nExecutes the <code>f32.store</code> Wasm operation.\nExecute <code>f32.sub</code> Wasm operation.\nExecute <code>f32.trunc</code> Wasm operation.\nExecute <code>f64.abs</code> Wasm operation.\nExecute <code>f64.add</code> Wasm operation.\nExecute <code>f64.ceil</code> Wasm operation.\nExecute <code>f64.convert_i32_s</code> Wasm operation.\nExecute <code>f64.convert_i32_u</code> Wasm operation.\nExecute <code>f64.convert_i64_s</code> Wasm operation.\nExecute <code>f64.convert_i64_u</code> Wasm operation.\nExecute <code>f64.copysign</code> Wasm operation.\nExecute <code>f64.div</code> Wasm operation.\nExecute <code>f64.eq</code> Wasm operation.\nExecute <code>f64.floor</code> Wasm operation.\nExecute <code>f64.ge</code> Wasm operation.\nExecute <code>f64.gt</code> Wasm operation.\nExecute <code>f64.le</code> Wasm operation.\nExecutes the <code>f64.load</code> Wasm operation.\nExecute <code>f64.lt</code> Wasm operation.\nExecute <code>f64.max</code> Wasm operation.\nExecute <code>f64.min</code> Wasm operation.\nExecute <code>f64.mul</code> Wasm operation.\nExecute <code>f64.ne</code> Wasm operation.\nExecute <code>f64.nearest</code> Wasm operation.\nExecute <code>f64.neg</code> Wasm operation.\nExecute <code>f64.promote_f32</code> Wasm operation.\nExecute <code>f64.sqrt</code> Wasm operation.\nExecutes the <code>f64.store</code> Wasm operation.\nExecute <code>f64.sub</code> Wasm operation.\nExecute <code>f64.trunc</code> Wasm operation.\nReturns the fractional part of the float.\nReturns the fractional part of the float.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>amount</code> of <code>Pages</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a float from its underlying bits.\nCreates a float from its underlying bits.\nCreates a float from the respective primitive float type.\nCreates a float from the respective primitive float type.\nExecute <code>i32.add</code> Wasm operation.\nExecute <code>i32.and</code> Wasm operation.\nExecute <code>i32.clz</code> Wasm operation.\nExecute <code>i32.ctz</code> Wasm operation.\nExecute <code>i32.div_s</code> Wasm operation.\nExecute <code>i32.div_u</code> Wasm operation.\nExecute <code>i32.eq</code> Wasm operation.\nExecute <code>i32.eqz</code> Wasm operation.\nCreates a new <code>Trap</code> representing an explicit program exit …\nReturns the classic <code>i32</code> exit program code of a <code>Trap</code> if any.\nExecute <code>i32.extend16_s</code> Wasm operation.\nExecute <code>i32.extend8_s</code> Wasm operation.\nExecute <code>i32.ge_s</code> Wasm operation.\nExecute <code>i32.ge_u</code> Wasm operation.\nExecute <code>i32.gt_s</code> Wasm operation.\nExecute <code>i32.gt_u</code> Wasm operation.\nExecute <code>i32.le_s</code> Wasm operation.\nExecute <code>i32.le_u</code> Wasm operation.\nExecutes the <code>i32.load</code> Wasm operation.\nExecutes the <code>i32.load16_s</code> Wasm operation.\nExecutes the <code>i32.load16_u</code> Wasm operation.\nExecutes the <code>i32.load8_s</code> Wasm operation.\nExecutes the <code>i32.load8_u</code> Wasm operation.\nExecute <code>i32.lt_s</code> Wasm operation.\nExecute <code>i32.lt_u</code> Wasm operation.\nExecute <code>i32.mul</code> Wasm operation.\nExecute <code>i32.ne</code> Wasm operation.\nExecute <code>i32.or</code> Wasm operation.\nExecute <code>i32.popcnt</code> Wasm operation.\nExecute <code>i32.rem_s</code> Wasm operation.\nExecute <code>i32.rem_u</code> Wasm operation.\nExecute <code>i32.rotl</code> Wasm operation.\nExecute <code>i32.rotr</code> Wasm operation.\nExecute <code>i32.shl</code> Wasm operation.\nExecute <code>i32.shr_s</code> Wasm operation.\nExecute <code>i32.shr_u</code> Wasm operation.\nExecutes the <code>i32.store</code> Wasm operation.\nExecutes the <code>i32.store16</code> Wasm operation.\nExecutes the <code>i32.store8</code> Wasm operation.\nExecute <code>i32.sub</code> Wasm operation.\nExecute <code>i32.trunc_f32_s</code> Wasm operation.\nExecute <code>i32.trunc_f32_u</code> Wasm operation.\nExecute <code>i32.trunc_f64_s</code> Wasm operation.\nExecute <code>i32.trunc_f64_u</code> Wasm operation.\nExecute <code>i32.trunc_sat_f32_s</code> Wasm operation.\nExecute <code>i32.trunc_sat_f32_u</code> Wasm operation.\nExecute <code>i32.trunc_sat_f64_s</code> Wasm operation.\nExecute <code>i32.trunc_sat_f64_u</code> Wasm operation.\nExecute <code>i32.wrap_i64</code> Wasm operation.\nExecute <code>i32.xor</code> Wasm operation.\nExecute <code>i64.add</code> Wasm operation.\nExecute <code>i64.and</code> Wasm operation.\nExecute <code>i64.clz</code> Wasm operation.\nExecute <code>i64.ctz</code> Wasm operation.\nExecute <code>i64.div_s</code> Wasm operation.\nExecute <code>i64.div_u</code> Wasm operation.\nExecute <code>i64.eq</code> Wasm operation.\nExecute <code>i64.eqz</code> Wasm operation.\nExecute <code>i64.extend16_s</code> Wasm operation.\nExecute <code>i64.extend32_s</code> Wasm operation.\nExecute <code>i64.extend8_s</code> Wasm operation.\nExecute <code>i64.extend_i32_s</code> Wasm operation.\nExecute <code>i64.extend_i32_u</code> Wasm operation.\nExecute <code>i64.ge_s</code> Wasm operation.\nExecute <code>i64.ge_u</code> Wasm operation.\nExecute <code>i64.gt_s</code> Wasm operation.\nExecute <code>i64.gt_u</code> Wasm operation.\nExecute <code>i64.le_s</code> Wasm operation.\nExecute <code>i64.le_u</code> Wasm operation.\nExecutes the <code>i64.load</code> Wasm operation.\nExecutes the <code>i64.load16_s</code> Wasm operation.\nExecutes the <code>i64.load16_u</code> Wasm operation.\nExecutes the <code>i64.load32_s</code> Wasm operation.\nExecutes the <code>i64.load32_u</code> Wasm operation.\nExecutes the <code>i64.load8_s</code> Wasm operation.\nExecutes the <code>i64.load8_u</code> Wasm operation.\nExecute <code>i64.lt_s</code> Wasm operation.\nExecute <code>i64.lt_u</code> Wasm operation.\nExecute <code>i64.mul</code> Wasm operation.\nExecute <code>i64.ne</code> Wasm operation.\nExecute <code>i64.or</code> Wasm operation.\nExecute <code>i64.popcnt</code> Wasm operation.\nExecute <code>i64.rem_s</code> Wasm operation.\nExecute <code>i64.rem_u</code> Wasm operation.\nExecute <code>i64.rotl</code> Wasm operation.\nExecute <code>i64.rotr</code> Wasm operation.\nExecute <code>i64.shl</code> Wasm operation.\nExecute <code>i64.shr_s</code> Wasm operation.\nExecute <code>i64.shr_u</code> Wasm operation.\nExecutes the <code>i64.store</code> Wasm operation.\nExecutes the <code>i64.store16</code> Wasm operation.\nExecutes the <code>i64.store32</code> Wasm operation.\nExecutes the <code>i64.store8</code> Wasm operation.\nExecute <code>i64.sub</code> Wasm operation.\nExecute <code>i64.trunc_f32_s</code> Wasm operation.\nExecute <code>i64.trunc_f32_u</code> Wasm operation.\nExecute <code>i64.trunc_f64_s</code> Wasm operation.\nExecute <code>i64.trunc_f64_u</code> Wasm operation.\nExecute <code>i64.trunc_sat_f32_s</code> Wasm operation.\nExecute <code>i64.trunc_sat_f32_u</code> Wasm operation.\nExecute <code>i64.trunc_sat_f64_s</code> Wasm operation.\nExecute <code>i64.trunc_sat_f64_u</code> Wasm operation.\nExecute <code>i64.xor</code> Wasm operation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>InvalidLen</code> <code>UntypedError</code>.\nReturns true if the trait object wraps an object of type …\nReturns <code>true</code> if the float is not a number (NaN).\nReturns <code>true</code> if the float is not a number (NaN).\nReturns <code>true</code> if <code>ValType</code> is a Wasm numeric type.\nReturns <code>true</code> if <code>ValType</code> is a Wasm reference type.\nReturns the maximum float between <code>self</code> and <code>other</code>.\nReturns the maximum float between <code>self</code> and <code>other</code>.\nThe maximum amount of pages on the <code>wasm32</code> target.\nReturns the minimum float between <code>self</code> and <code>other</code>.\nReturns the minimum float between <code>self</code> and <code>other</code>.\nCreates a new <code>Trap</code> described by a <code>message</code>.\nCreates a new amount of <code>Pages</code> if the amount is within …\nReturns the underlying bits of the float.\nReturns the underlying bits of the float.\nReturns the underlying bits of the <code>UntypedVal</code>.\nReturns the amount of bytes required for the amount of …\nReturns the respective primitive float type.\nReturns the respective primitive float type.\nReturns the <code>TrapCode</code> traps originating from Wasm execution.\nReturns the trap message as specified by the WebAssembly …\nIndicates that the calling scope is unlikely to be …\nIndicates that the condition is likely <code>true</code>.\nIndicates that the condition is unlikely <code>true</code>.\nOccurs when accessing the table out of bounds.\nOccur when coping elements of tables out of bounds.\nEncountered duplicate definitions for the same name.\nCaused when an element segment does not fit into the …\nOccurs when operating with a <code>Table</code> and mismatching element …\nThe source has reached the end of the stream.\nAn error that can occur upon parsing or compiling a Wasm …\nAn error that may occur upon operating on Wasm modules or …\nThe exported function could not be found.\nCaused when the <code>start</code> function was unexpectedly found in …\nA fuel error.\nAn error that may be encountered when operating on the …\nRaised when trying to use any of the <code>fuel</code> methods while …\nA function error.\nErrors that can occur upon type checking function …\nEncountered when a <code>FuncType</code> does not match the expected …\nA global variable error.\nOccurs when an imported global variable does not satisfy …\nAn error that may occur upon operating on global variables.\nEncountered when a <code>GlobalType</code> does not match the expected …\nOccurs when growing a table out of its set bounds.\nA trap as defined by the WebAssembly specification.\nAn <code>i32</code> exit status usually used by WASI applications.\nOccurs when trying to write to an immutable global …\nCaused when the number of required imports does not match …\nCaused when a given external value does not match the type …\nA module instantiation error.\nAn error that may occur upon instantiation of a Wasm …\nEncountered when a <code>MemoryType</code> does not match the expected …\nTried to create an invalid linear memory type.\nTried to create memory with invalid static buffer size\nOccurs when <code>ty</code> is not a subtype of <code>other</code>.\nOccurs when <code>ty</code> is not a subtype of <code>other</code>.\nEncountered when a <code>TableType</code> does not match the expected …\nEncountered when a definition with invalid type is found.\nEncountered when an enforced limit is exceeded.\nA linker error.\nAn error that may occur upon operating with <code>Linker</code> …\nA linear memory error.\nOccurs when an imported memory does not satisfy the …\nAn error that may occur upon operating with virtual or …\nA message usually provided by Wasmi users of host function …\nWhen a Wasm module exceeds the average bytes per function …\nSpecified an incorrect number of parameters.\nA function parameter did not match the required type.\nSpecified an incorrect number of results.\nA function result did not match the required type.\nEncountered when no definition for an import is found.\nTried to access linear memory out of bounds.\nTried to allocate more virtual memory than technically …\nTried to grow linear memory out of its set bounds.\nRaised when trying to consume more fuel than is available …\nEncountered when there is a problem with the Wasm input …\nErrors returned by <code>Read::read</code>.\nCaused when a function has a mismatching signature.\nA table error.\nOccurs when an imported table does not satisfy the …\nErrors that may occur upon operating with table entities.\nWhen a Wasm module exceeds the data segment limit.\nWhen a Wasm module exceeds the element segment limit.\nWhen a Wasm module exceeds the function limit.\nWhen a Wasm module exceeds the global variable limit.\nWhen a Wasm module exceeds the linear memory limit.\nTried to create too many memories\nWhen a Wasm module exceeds the function parameter limit.\nWhen a Wasm module exceeds the function results limit.\nWhen a Wasm module exceeds the table limit.\nEncountered when there is a Wasm to Wasmi translation …\nA trap code as defined by the WebAssembly specification.\nOccurs when trying writing a value with mismatching type …\nAn unknown error occurred.\nOccurs when a global type does not satisfy the constraints …\nEncountered when there is a Wasm parsing or validation …\nReturns a dynamic reference to <code>HostError</code> if <code>ErrorKind</code> is a …\nReturns a dynamic reference to <code>HostError</code> if <code>ErrorKind</code> is a …\nReturns a <code>i32</code> if <code>ErrorKind</code> is an <code>ErrorKind::I32ExitStatus</code>.\nReturns a reference to <code>TrapCode</code> if <code>ErrorKind</code> is a <code>TrapCode</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an error indicating that fuel metering has been …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>HostError</code> if <code>ErrorKind</code> is a <code>HostError</code>.\nReturns an error indicating that too much fuel has been …\nThe type of the new value that mismatches the type of the …\nThe type of the global variable.\nThe required <code>GlobalType</code>.\nThe unsatisfying <code>GlobalType</code>.\nThe actually found external value for the module import.\nThe actual function signature for the function import.\nThe amount of elements with which the table is initialized …\nThe expected external value for the module import.\nThe expected function signature for the function import.\nThe index of the found <code>start</code> function.\nThe offset to store the <code>amount</code> of elements into the table.\nThe table of the element segment.\nThe expected import type.\nThe expected <code>FuncType</code>.\nThe expected <code>GlobalType</code>.\nThe found definition type.\nThe mismatching <code>FuncType</code> found.\nThe mismatching <code>GlobalType</code> found.\nThe duplicate import name of the definition.\nThe name of the import for which no definition was found.\nThe name of the import for which no definition was found.\nThe name of the import with the mismatched type.\nThe name of the import with the invalid <code>TableType</code>.\nThe name of the import with the invalid <code>MemoryType</code>.\nThe name of the import with the mismatched type.\nThe <code>TableType</code> this is supposed to be a supertype of <code>ty</code>.\nThe <code>MemoryType</code> this is supposed to be a supertype of <code>ty</code>.\nThe type of the import for which no definition has been …\nThe <code>TableType</code> that is supposed to be a subtype of <code>other</code>.\nThe <code>MemoryType</code> that is supposed to be a subtype of <code>other</code>.\nThe <code>MemoryType</code> which is supposed to be a supertype of <code>ty</code>.\nThe <code>MemoryType</code> which is not a subtype of <code>other</code>.\nEncountered element type.\nThe current table size before the growth operation.\nThe current size of the table.\nThe amount of requested invalid growth.\nExpected element type for the <code>Table</code>.\nThe maximum allowed table size.\nThe accessed index that is out of bounds.\nThe <code>TableType</code> which is supposed to be a supertype of <code>ty</code>.\nThe <code>TableType</code> which is not a subtype of <code>other</code>.\nSignals that the <code>LinkerBuilder</code> is itself under …\nSignals that the <code>LinkerBuilder</code> is ready to create new …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")