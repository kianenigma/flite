searchState.loadedDescShard("wasmi_core", 0, "Attempted to make an invalid conversion to an integer type.\nAttempt to invoke a function with mismatching signature.\nTuple types that allow to decode a slice of <code>UntypedVal</code>.\nTuple types that allow to encode a slice of <code>UntypedVal</code>.\nA nullable external reference.\nA NaN preserving <code>f32</code> type.\n32-bit IEEE 754-2008 floating point number.\nA NaN preserving <code>f64</code> type.\n64-bit IEEE 754-2008 floating point number.\nA nullable function reference.\nThis trap is raised when a growth operation was attempted …\nTrait that allows the host to return custom error.\n32-bit signed or unsigned integer.\n64-bit signed or unsigned integer.\nIndicates that a <code>call_indirect</code> instruction called a …\nAttempt to divide by zero.\nAn integer arithmetic operation caused an overflow.\nThe <code>UntypedVal</code> slice length did not match <code>Self</code>.\nAttempt to load or store at the address which lies outside …\nThis trap is raised when a WebAssembly execution ran out …\nAn amount of linear memory pages.\nStack overflow.\nAttempt to access table element at index which lies …\nError type which can be returned by Wasm code or by the …\nError type which can be thrown by wasm code or by host …\nWasm code executed <code>unreachable</code> opcode.\nAn error that may occur upon encoding or decoding slices …\nAn untyped value.\nType of a value.\nReturns the absolute value of the float.\nReturns the absolute value of the float.\nAdds the given amount of pages to <code>self</code>.\nSubstracts the given amount of pages from <code>self</code>.\nDecodes the slice of <code>UntypedVal</code> as a value of type <code>T</code>.\nDecodes the slice of <code>UntypedVal</code> as a value of type <code>Self</code>.\nReturns a boxed object from a boxed trait object if the …\nConsumes <code>self</code> to downcast the <code>Trap</code> into the <code>T: HostError</code> …\nReturns a mutable reference to the object within the trait …\nDowncasts the <code>Trap</code> into the <code>T: HostError</code> if possible.\nReturns an <code>Rc</code>-ed object from an <code>Rc</code>-ed trait object if the …\nReturns a reference to the object within the trait object …\nDowncasts the <code>Trap</code> into the <code>T: HostError</code> if possible.\nEncodes the slice of <code>UntypedVal</code> from the given value of …\nEncodes the slice of <code>UntypedVal</code> from the given value of …\nExecute <code>f32.abs</code> Wasm operation.\nExecute <code>f32.add</code> Wasm operation.\nExecute <code>f32.ceil</code> Wasm operation.\nExecute <code>f32.convert_i32_s</code> Wasm operation.\nExecute <code>f32.convert_i32_u</code> Wasm operation.\nExecute <code>f32.convert_i64_s</code> Wasm operation.\nExecute <code>f32.convert_i64_u</code> Wasm operation.\nExecute <code>f32.copysign</code> Wasm operation.\nExecute <code>f32.demote_f64</code> Wasm operation.\nExecute <code>f32.div</code> Wasm operation.\nExecute <code>f32.eq</code> Wasm operation.\nExecute <code>f32.floor</code> Wasm operation.\nExecute <code>f32.ge</code> Wasm operation.\nExecute <code>f32.gt</code> Wasm operation.\nExecute <code>f32.le</code> Wasm operation.\nExecutes the <code>f32.load</code> Wasm operation.\nExecute <code>f32.lt</code> Wasm operation.\nExecute <code>f32.max</code> Wasm operation.\nExecute <code>f32.min</code> Wasm operation.\nExecute <code>f32.mul</code> Wasm operation.\nExecute <code>f32.ne</code> Wasm operation.\nExecute <code>f32.nearest</code> Wasm operation.\nExecute <code>f32.neg</code> Wasm operation.\nExecute <code>f32.sqrt</code> Wasm operation.\nExecutes the <code>f32.store</code> Wasm operation.\nExecute <code>f32.sub</code> Wasm operation.\nExecute <code>f32.trunc</code> Wasm operation.\nExecute <code>f64.abs</code> Wasm operation.\nExecute <code>f64.add</code> Wasm operation.\nExecute <code>f64.ceil</code> Wasm operation.\nExecute <code>f64.convert_i32_s</code> Wasm operation.\nExecute <code>f64.convert_i32_u</code> Wasm operation.\nExecute <code>f64.convert_i64_s</code> Wasm operation.\nExecute <code>f64.convert_i64_u</code> Wasm operation.\nExecute <code>f64.copysign</code> Wasm operation.\nExecute <code>f64.div</code> Wasm operation.\nExecute <code>f64.eq</code> Wasm operation.\nExecute <code>f64.floor</code> Wasm operation.\nExecute <code>f64.ge</code> Wasm operation.\nExecute <code>f64.gt</code> Wasm operation.\nExecute <code>f64.le</code> Wasm operation.\nExecutes the <code>f64.load</code> Wasm operation.\nExecute <code>f64.lt</code> Wasm operation.\nExecute <code>f64.max</code> Wasm operation.\nExecute <code>f64.min</code> Wasm operation.\nExecute <code>f64.mul</code> Wasm operation.\nExecute <code>f64.ne</code> Wasm operation.\nExecute <code>f64.nearest</code> Wasm operation.\nExecute <code>f64.neg</code> Wasm operation.\nExecute <code>f64.promote_f32</code> Wasm operation.\nExecute <code>f64.sqrt</code> Wasm operation.\nExecutes the <code>f64.store</code> Wasm operation.\nExecute <code>f64.sub</code> Wasm operation.\nExecute <code>f64.trunc</code> Wasm operation.\nReturns the fractional part of the float.\nReturns the fractional part of the float.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>amount</code> of <code>Pages</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a float from its underlying bits.\nCreates a float from its underlying bits.\nCreates a float from the respective primitive float type.\nCreates a float from the respective primitive float type.\nExecute <code>i32.add</code> Wasm operation.\nExecute <code>i32.and</code> Wasm operation.\nExecute <code>i32.clz</code> Wasm operation.\nExecute <code>i32.ctz</code> Wasm operation.\nExecute <code>i32.div_s</code> Wasm operation.\nExecute <code>i32.div_u</code> Wasm operation.\nExecute <code>i32.eq</code> Wasm operation.\nExecute <code>i32.eqz</code> Wasm operation.\nCreates a new <code>Trap</code> representing an explicit program exit …\nReturns the classic <code>i32</code> exit program code of a <code>Trap</code> if any.\nExecute <code>i32.extend16_s</code> Wasm operation.\nExecute <code>i32.extend8_s</code> Wasm operation.\nExecute <code>i32.ge_s</code> Wasm operation.\nExecute <code>i32.ge_u</code> Wasm operation.\nExecute <code>i32.gt_s</code> Wasm operation.\nExecute <code>i32.gt_u</code> Wasm operation.\nExecute <code>i32.le_s</code> Wasm operation.\nExecute <code>i32.le_u</code> Wasm operation.\nExecutes the <code>i32.load</code> Wasm operation.\nExecutes the <code>i32.load16_s</code> Wasm operation.\nExecutes the <code>i32.load16_u</code> Wasm operation.\nExecutes the <code>i32.load8_s</code> Wasm operation.\nExecutes the <code>i32.load8_u</code> Wasm operation.\nExecute <code>i32.lt_s</code> Wasm operation.\nExecute <code>i32.lt_u</code> Wasm operation.\nExecute <code>i32.mul</code> Wasm operation.\nExecute <code>i32.ne</code> Wasm operation.\nExecute <code>i32.or</code> Wasm operation.\nExecute <code>i32.popcnt</code> Wasm operation.\nExecute <code>i32.rem_s</code> Wasm operation.\nExecute <code>i32.rem_u</code> Wasm operation.\nExecute <code>i32.rotl</code> Wasm operation.\nExecute <code>i32.rotr</code> Wasm operation.\nExecute <code>i32.shl</code> Wasm operation.\nExecute <code>i32.shr_s</code> Wasm operation.\nExecute <code>i32.shr_u</code> Wasm operation.\nExecutes the <code>i32.store</code> Wasm operation.\nExecutes the <code>i32.store16</code> Wasm operation.\nExecutes the <code>i32.store8</code> Wasm operation.\nExecute <code>i32.sub</code> Wasm operation.\nExecute <code>i32.trunc_f32_s</code> Wasm operation.\nExecute <code>i32.trunc_f32_u</code> Wasm operation.\nExecute <code>i32.trunc_f64_s</code> Wasm operation.\nExecute <code>i32.trunc_f64_u</code> Wasm operation.\nExecute <code>i32.trunc_sat_f32_s</code> Wasm operation.\nExecute <code>i32.trunc_sat_f32_u</code> Wasm operation.\nExecute <code>i32.trunc_sat_f64_s</code> Wasm operation.\nExecute <code>i32.trunc_sat_f64_u</code> Wasm operation.\nExecute <code>i32.wrap_i64</code> Wasm operation.\nExecute <code>i32.xor</code> Wasm operation.\nExecute <code>i64.add</code> Wasm operation.\nExecute <code>i64.and</code> Wasm operation.\nExecute <code>i64.clz</code> Wasm operation.\nExecute <code>i64.ctz</code> Wasm operation.\nExecute <code>i64.div_s</code> Wasm operation.\nExecute <code>i64.div_u</code> Wasm operation.\nExecute <code>i64.eq</code> Wasm operation.\nExecute <code>i64.eqz</code> Wasm operation.\nExecute <code>i64.extend16_s</code> Wasm operation.\nExecute <code>i64.extend32_s</code> Wasm operation.\nExecute <code>i64.extend8_s</code> Wasm operation.\nExecute <code>i64.extend_i32_s</code> Wasm operation.\nExecute <code>i64.extend_i32_u</code> Wasm operation.\nExecute <code>i64.ge_s</code> Wasm operation.\nExecute <code>i64.ge_u</code> Wasm operation.\nExecute <code>i64.gt_s</code> Wasm operation.\nExecute <code>i64.gt_u</code> Wasm operation.\nExecute <code>i64.le_s</code> Wasm operation.\nExecute <code>i64.le_u</code> Wasm operation.\nExecutes the <code>i64.load</code> Wasm operation.\nExecutes the <code>i64.load16_s</code> Wasm operation.\nExecutes the <code>i64.load16_u</code> Wasm operation.\nExecutes the <code>i64.load32_s</code> Wasm operation.\nExecutes the <code>i64.load32_u</code> Wasm operation.\nExecutes the <code>i64.load8_s</code> Wasm operation.\nExecutes the <code>i64.load8_u</code> Wasm operation.\nExecute <code>i64.lt_s</code> Wasm operation.\nExecute <code>i64.lt_u</code> Wasm operation.\nExecute <code>i64.mul</code> Wasm operation.\nExecute <code>i64.ne</code> Wasm operation.\nExecute <code>i64.or</code> Wasm operation.\nExecute <code>i64.popcnt</code> Wasm operation.\nExecute <code>i64.rem_s</code> Wasm operation.\nExecute <code>i64.rem_u</code> Wasm operation.\nExecute <code>i64.rotl</code> Wasm operation.\nExecute <code>i64.rotr</code> Wasm operation.\nExecute <code>i64.shl</code> Wasm operation.\nExecute <code>i64.shr_s</code> Wasm operation.\nExecute <code>i64.shr_u</code> Wasm operation.\nExecutes the <code>i64.store</code> Wasm operation.\nExecutes the <code>i64.store16</code> Wasm operation.\nExecutes the <code>i64.store32</code> Wasm operation.\nExecutes the <code>i64.store8</code> Wasm operation.\nExecute <code>i64.sub</code> Wasm operation.\nExecute <code>i64.trunc_f32_s</code> Wasm operation.\nExecute <code>i64.trunc_f32_u</code> Wasm operation.\nExecute <code>i64.trunc_f64_s</code> Wasm operation.\nExecute <code>i64.trunc_f64_u</code> Wasm operation.\nExecute <code>i64.trunc_sat_f32_s</code> Wasm operation.\nExecute <code>i64.trunc_sat_f32_u</code> Wasm operation.\nExecute <code>i64.trunc_sat_f64_s</code> Wasm operation.\nExecute <code>i64.trunc_sat_f64_u</code> Wasm operation.\nExecute <code>i64.xor</code> Wasm operation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>InvalidLen</code> <code>UntypedError</code>.\nReturns true if the trait object wraps an object of type …\nReturns <code>true</code> if the float is not a number (NaN).\nReturns <code>true</code> if the float is not a number (NaN).\nReturns <code>true</code> if <code>ValType</code> is a Wasm numeric type.\nReturns <code>true</code> if <code>ValType</code> is a Wasm reference type.\nReturns the maximum float between <code>self</code> and <code>other</code>.\nReturns the maximum float between <code>self</code> and <code>other</code>.\nThe maximum amount of pages on the <code>wasm32</code> target.\nReturns the minimum float between <code>self</code> and <code>other</code>.\nReturns the minimum float between <code>self</code> and <code>other</code>.\nCreates a new <code>Trap</code> described by a <code>message</code>.\nCreates a new amount of <code>Pages</code> if the amount is within …\nReturns the underlying bits of the float.\nReturns the underlying bits of the float.\nReturns the underlying bits of the <code>UntypedVal</code>.\nReturns the amount of bytes required for the amount of …\nReturns the respective primitive float type.\nReturns the respective primitive float type.\nReturns the <code>TrapCode</code> traps originating from Wasm execution.\nReturns the trap message as specified by the WebAssembly …\nIndicates that the calling scope is unlikely to be …\nIndicates that the condition is likely <code>true</code>.\nIndicates that the condition is unlikely <code>true</code>.")