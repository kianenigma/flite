searchState.loadedDescShard("bridge_runtime_common", 0, "Common types/functions that may be used by runtimes of all …\nBridge-specific transaction extensions.\nDeclares a runtime-specific …\nHelpers for implementing various message-related runtime …\nHelpers for easier manipulation of call processing with …\nModule provides utilities for easier XCM handling, e.g: …\nTransaction extension that rejects bridge-related …\nBridge transaction priority calculator.\nSigned extension that refunds relayer if he has delivered …\nA duplication of the <code>FilterCall</code> trait.\nWrapper for the bridge GRANDPA pallet that checks calls …\nWrapper for the bridge parachains pallet that checks calls …\nData that may be passed from the validate to <code>post_dispatch</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalled after transaction is dispatched.\nCalled during validation. Needs to checks whether a …\nWe’ll deal with different bridge items here - messages, …\nCompute priority boost for transaction that brings given …\n<code>RefundCalculator</code> implementation which refunds the actual …\nRelay chain finality + parachain finality + message …\nThe underlying integer type in which the refund is …\nThe parachain Id.\nType of the call that the extension recognizes.\nThe messages lane id.\nSigned extension unique identifier.\nThe instance of the bridge parachains pallet.\nThe instance of the bridge messages pallet.\nStandalone message delivery/confirmation call.\nMessages pallet and lane reference.\nDo nothing with relayer account.\nParachain finality + message delivery/confirmation calls.\nData that is crafted in <code>pre_dispatch</code> method and used at …\nPriority boost calculator.\nRefund amount calculator.\nSigned extension that refunds a relayer for new messages …\nTransaction extension that refunds a relayer for …\nSigned extension that refunds a relayer for new messages …\nRefund calculator.\nEverything common among our refund signed extensions.\nAdapter that allow implementing …\nDefault implementation of <code>RefundableMessagesLaneId</code>.\nTrait identifying a bridged messages lane. A relayer might …\nImplementation of <code>RefundableParachainId</code> for <code>trait Parachain</code>…\nTrait identifying a bridged parachain. A relayer might be …\nRelay chain finality + message delivery/confirmation calls.\nThe actions on relayer account that need to be performed …\nReward the relayer.\nThis chain runtime.\nSlash the relayer.\nCalled from post-dispatch and shall perform additional …\nGiven post-dispatch information, analyze the outcome of …\nReturns number of bundled messages <code>Some(_)</code>, if the given …\nCheck if parsed call is already obsolete.\nCompute refund for given transaction.\nUnpack batch runtime call.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven runtime call, check if it has supported format. …\nImplementation of the <code>To*InboundLaneApi::message_details</code>.\nImplementation of the <code>To*OutboundLaneApi::message_details</code>.\nGeneric info about a messages delivery/confirmation proof.\nHelper struct that provides methods for working with a …\nInfo about a <code>ReceiveMessagesProof</code> or a …\nTrait representing a call that is a sub type of …\nMessages delivery confirmation call info.\nInfo about a <code>ReceiveMessagesDeliveryProof</code> call which tries …\nMessages delivery call info.\nInfo about a <code>ReceiveMessagesProof</code> call which tries to …\nOccupation state of the unrewarded relayers vector.\nBase messages proof info\nNonce of the best message, stored by this chain before the …\nReturns range of messages, bundled with the call.\nNonces of messages, included in the call.\nCreate a new instance of <code>CallInfo</code> from a …\nCreate a new instance of <code>CallInfo</code> from a …\nEnsures that a <code>ReceiveMessagesProof</code> or a …\nThe number of messages that we are ready to accept.\nThe number of remaining unoccupied entries for new …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMessage lane, used by the call.\nCreate a new instance of <code>ReceiveMessagesDeliveryProofInfo</code> …\nCreate a new instance of <code>ReceiveMessagesProofInfo</code> from a …\nState of unrewarded relayers vector.\nReturns true if:\nAn XCM message that is sent to the sending chain when the …\nMessage has been dispatched.\nWe’ve been unable to decode message payload.\nManager of local XCM queues (and indirectly - underlying …\nInstance of the messages pallet that is used to send …\nMessage has <strong>NOT</strong> been dispatched because of given error.\nRuntime that has messages pallet deployed.\nA pair of sending chain location and message lane, used by …\nActual XCM message sender (<code>HRMP</code> or <code>UMP</code>) to the source chain\nAn XCM message that is sent to the sending chain when the …\nEncoded XCM blob. We expect the bridge messages pallet to …\n<code>XcmBlobHauler</code> is responsible for sending messages to the …\nXCM bridge adapter which connects <code>XcmBlobHauler</code> with …\n<code>XcmBlobMessageDispatch</code> is responsible for dispatching …\nMessage dispatch result type for single message.\nAdapter for the implementation of <code>GetVersion</code>, which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMessage lane, used by the sending chain.\nSending chain relative location.\nCreate new object using provided location and lane.\nMust be called whenever we push a message to the bridge …\nMust be called whenever we receive a message delivery …\nReturns <code>true</code> if we want to handle congestion.")