searchState.loadedDescShard("parity_util_mem", 0, "Crate for parity memory management related utilities. It …\nTrait for measuring the “shallow” heap usage of a …\nTrait for measuring the “deep” heap usage of a data …\nOperations used when measuring heap usage of data …\nSnapshot of collected memory metrics.\nAccessor to the allocator internals.\nAn error related to the memory stats gathering.\nTotal allocated memory, in bytes.\ndefault allocator management Features are:\nUsed to optimize <code>MallocSizeOf</code> implementation for …\nUsed to optimize <code>MallocSizeOf</code> implementation for …\nImplementation of <code>MallocSize</code> for common ethereum types: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIs an <code>enclosing_size_of_op</code> available?\nCall <code>have_seen_ptr_op</code> on <code>ptr</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCall <code>enclosing_size_of_op</code>, which must be available, on <code>ptr</code>…\nHeap size of structure.\nCall <code>size_of_op</code> on <code>ptr</code>, first checking that the allocation …\nImplement notion of 0 allocation size for some type(s).\nCreate an instance of an allocation tracker.\nImplementation of <code>MallocSize</code> primitive types.\nTotal resident memory, in bytes.\nMeasure the heap usage of immediate heap-allocated …\nMeasure the heap usage of all descendant heap-allocated …\nCreate an allocation snapshot.\nExtension methods for <code>MallocSizeOf</code> trait, do not implement …\nMethod to launch a heapsize measurement with a fresh state.\nGet a new instance of a MallocSizeOfOps")