searchState.loadedDescShard("string_interner", 0, "Caches strings efficiently, with minimal memory footprint …\nThe default backend recommended for general use.\nDefault hasher for <code>HashMap</code>.\nA convenience <code>StringInterner</code> type based on the …\nThe symbol type that is used by default.\nData structure to intern and resolve strings.\nTypes implementing this trait can be used as symbols for …\nBackends for the <code>StringInterner</code>.\nReturns the argument unchanged.\nReturns the symbol for the given string if any.\nInterns the given string.\nInterns the given <code>&#39;static</code> string.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the string interner has no interned …\nReturns an iterator that yields all interned strings and …\nReturns the number of strings interned by the interner.\nCreates a new empty <code>StringInterner</code>.\nReturns the string for the given `symbol`` if any.\nReturns the string for the given <code>symbol</code> without performing …\nShrink backend capacity to fit the interned strings …\nInterfaces and types to be used as symbols for the …\nReturns the <code>usize</code> representation of <code>self</code>.\nCreates a symbol from a <code>usize</code>.\nCreates a new <code>StringInterner</code> with the given initial …\nCreates a new empty <code>StringInterner</code> with the given initial …\nCreates a new empty <code>StringInterner</code> with the given hasher.\nTypes implementing this trait may act as backends for the …\nAn interner backend that reduces memory allocations by …\nAn interner backend that appends all interned string …\nThe default backend recommended for general use.\nThe iterator over the symbols and their strings.\nAn interner backend that accumulates all interned string …\nThe symbol used by the string interner backend.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInterns the given string and returns its interned ref and …\nInterns the given static string and returns its interned …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an iterator that yields all interned strings and …\nResolves the given symbol to its original string contents.\nResolves the given symbol to its original string contents.\nShrink backend capacity to fit interned symbols exactly.\nCreates a new backend for the given capacity.\nThe symbol type that is used by default.\nTypes implementing this trait can be used as symbols for …\nSymbol that is 16-bit in size.\nSymbol that is 32-bit in size.\nSymbol that is the same size as a pointer (<code>usize</code>).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>usize</code> representation of <code>self</code>.\nCreates a symbol from a <code>usize</code>.")