searchState.loadedDescShard("wasmi_collections", 0, "Data structures specialized for usage in the Wasmi …\nAn arena allocator with a given index and entity type.\nStores components for entities backed by a <code>Vec</code>.\nA deduplicating arena allocator with a given index and …\nA default key-value mapping.\nA default set of values.\nEfficienty interns and deduplicates strings.\nFast arena data structures specialized for usage in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUtilities for hashmap initialization based on random …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType definitions for a default map.\nType definitions for a default set.\nData structure to efficiently store and deduplicate …\nAn arena allocator with a given index and entity type.\nTypes that can be used as indices for arenas.\nStores components for entities backed by a <code>Vec</code>.\nA deduplicating arena allocator with a given index and …\nA guarded entity.\nAn iterator over shared references of arena entities and …\nAn iterator over exclusive references of arena entities …\nAllocates a new entity and returns its index.\nAllocates a new entity and returns its index.\nClears all components from the <code>ComponentVec</code>.\nClears all entities from the arena.\nClears all entities from the arena.\nReturns the entity index of the <code>GuardedEntity</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts the <code>usize</code> value into the associated <code>ArenaIndex</code>.\nReturns a shared reference to the component at the <code>index</code> …\nReturns a shared reference to the entity at the given …\nReturns a shared reference to the entity at the given …\nReturns an exclusive reference to the component at the …\nReturns an exclusive reference to the entity at the given …\nReturns an exclusive reference to the entity at the given …\nReturns an exclusive reference to the pair of entities at …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the <code>ArenaIndex</code> into the underlying <code>usize</code> value.\nReturns <code>true</code> if the <code>Arena</code> has not yet allocated entities.\nReturns <code>true</code> if the arena has not yet allocated entities.\nReturns an iterator over the shared reference of the <code>Arena</code> …\nReturns an iterator over the shared reference of the arena …\nReturns an iterator over the exclusive reference of the …\nReturns an iterator over the exclusive reference of the …\nReturns the allocated number of entities.\nReturns the allocated number of entities.\nCreates a new empty <code>ComponentVec</code>.\nCreates a new empty deduplicating entity arena.\nCreates a new <code>GuardedEntity</code>.\nCreates a new empty entity <code>Arena</code>.\nSets the <code>component</code> for the entity at <code>index</code>.\nUnsets the component for the entity at <code>index</code> and returns …\nWasmi’s hashing state stored per-map.\nWasmi’s hasher type used with <code>RandomState</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA view into a single entry in a <code>Map</code>, which may either be …\nAn iterator over the owned items of an <code>Map</code>.\nAn iterator over the owned keys of a <code>Map</code>.\nAn iterator over the owned values of a <code>Map</code>.\nAn iterator over the items of a <code>Map</code>.\nAn iterator over the mutable items of a <code>Map</code>.\nAn iterator over the keys of a <code>Map</code>.\nA default key-value mapping.\nAn occupied entry.\nA view into an occupied entry in a <code>Map</code>.\nA vacant entry.\nA view into a vacant entry in a <code>Map</code>.\nAn iterator over the values of a <code>Map</code>.\nAn mutable iterator over the values of a <code>Map</code>.\nProvides in-place mutable access to an occupied <code>Entry</code> …\nClears the <code>Map</code>, removing all elements.\nReturns true if <code>key</code> is contains in the <code>Map</code>.\nGets the given key’s corresponding entry in the <code>Map</code> for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nReturns a reference to the value corresponding to the <code>key</code>.\nReturns the key-value pair corresponding to the supplied …\nGets a mutable reference to the value in the entry.\nReturns a mutable reference to the value corresponding to …\nSets the value of the entry with the <code>OccupiedEntry</code>’s …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nInserts a key-value pair into the <code>Map</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the key.\nCreates a consuming iterator visiting all the keys in …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if the <code>Map</code> contains no elements.\nReturns an iterator that yields the items in the <code>Map</code>.\nReturns a mutable iterator that yields the items in the <code>Map</code>…\nGets a reference to the key in the entry.\nGets a reference to the key in the entry.\nReturns a reference to this <code>Entry</code>’s key.\nReturns an iterator that yields the keys in the <code>Map</code>.\nReturns the number of elements in the <code>Map</code>.\nCreates a new empty <code>Map</code>.\nEnsures a value is in the <code>Entry</code> by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the <code>Entry</code> by inserting the result of …\nEnsures a value is in the <code>Entry</code> by inserting, if empty, …\nTakes the value of the entry out of the <code>Map</code>, and returns …\nRemoves a key from the <code>Map</code>, returning the value at the key …\nTake ownership of the key and value from the <code>Map</code>.\nRemoves a key from the <code>Map</code>, returning the stored key and …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nReturns an iterator that yields the values in the <code>Map</code>.\nReturns a mutable iterator that yields the values in the …\nA lazy iterator producing elements in the difference of <code>Set</code>…\nA lazy iterator producing elements in the intersection of …\nAn iterator over the owned items of an <code>Set</code>.\nAn iterator over the items of a <code>Set</code>.\nA default set of values.\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>Set</code>s.\nClears the <code>Set</code>, removing all elements.\nReturns true if the <code>Set</code> contains an element equal to the …\nVisits the values representing the difference, i.e., the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the element in the <code>Set</code>, if any, …\nAdds <code>value</code> to the <code>Set</code>.\nVisits the values representing the intersection, i.e., the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the <code>Set</code> contains no elements.\nReturns <code>true</code> if the <code>Set</code> is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the <code>Set</code> is a superset of another, i.e., …\nReturns an iterator that yields the items in the <code>Set</code>.\nReturns the number of elements in the <code>Set</code>.\nIf the set contains an element equal to the value, removes …\nAdds a value to the <code>Set</code>, replacing the existing value, if …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nVisits the values representing the symmetric difference, …\nRemoves and returns the element in the <code>Set</code>, if any, that …\nVisits the values representing the union, i.e., all the …\nInternment hint to speed-up certain use cases.\nHint that the string to be interned likely already exists.\nHint that the string to be interned likely does not yet …\nNo hint is given to the <code>StringInterner</code>.\nEfficienty interns and deduplicates strings.\nSymbols returned by the <code>StringInterner</code> to resolve interned …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Sym</code> from the <code>u32</code> value.\nCreates a new <code>Sym</code> from the <code>usize</code> value.\nReturns the symbol for the given string if any.\nInterns the given string.\nInterns the given string with usage hint.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the <code>u32</code> value of the <code>Sym</code>.\nReturns the value of the <code>Sym</code> as <code>usize</code>.\nReturns <code>true</code> if the <code>StringInterner</code> has no interned strings.\nReturns the number of strings interned by the …\nCreates a new empty <code>StringInterner</code>.\nReturns the string for the given symbol if any.")