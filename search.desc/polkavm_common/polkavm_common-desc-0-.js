searchState.loadedDescShard("polkavm_common", 0, "This is an internal crate of PolkaVM; <strong>do not</strong> use it …\nEverything in this module affects the ABI of the guest …\nThis module defines the ABI boundary between the host and …\nThe memory map of a given guest program.\nThe address which, when jumped to, will return to the host.\nThe address at which the program’s stack starts inside …\nThe minimum required alignment of runtime code pointers.\nThe maximum byte size of the code blob.\nThe maximum number of functions the program can import.\nThe maximum number of entries in the jump table.\nThe maximum page size of the VM.\nThe minimum page size of the VM.\nCreates an empty memory map.\nReturns the argument unchanged.\nThe address at which the program’s heap starts.\nCalls <code>U::from(self)</code>.\nThe maximum size of the program’s heap.\nCalculates the memory map from the given parameters.\nThe page size of the program.\nThe address at where the program’s read-only data starts …\nThe range of addresses where the program’s read-only …\nThe size of the program’s read-only data.\nThe address at where the program’s read-write data …\nThe range of addresses where the program’s read-write …\nThe size of the program’s read-write data.\nThe address at where the program’s stack ends inside of …\nThe address at where the program’s stack starts inside …\nThe range of addresses where the program’s stack is …\nThe size of the program’s stack.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nList of all of the VM’s registers.\nList of all input/output argument registers.\nThe magic bytes with which every program blob must start …\nA line program state machine.\nA partially deserialized PolkaVM program.\nDebug information about a given region of bytecode.\nThe source location.\nReturns the code bitmask in its raw form.\nReturns the program code in its raw form.\nReturns the source code column of this location, if …\nThe column in the original source file.\nReturns the entry index of this region info within the …\nReturns the entry index of this line program object.\nReturns an iterator over program exports.\nReturns an iterator over the frames this region covers.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a program blob from parts.\nReturns the full name of the function.\nReturns the function name of location without the …\nReturns the line program for the given instruction.\nReturns the debug string for the given relative offset.\nThe range of instructions this region covers.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a jump table.\nReturns the source code line of this location, if …\nThe line in the original source file.\nReturns the source location of where this frame comes from.\nReturns the namespace of this location, if available.\nParses the given bytes into a program blob.\nReturns the source code path of this location, if …\nThe path to the original source file.\nReturns the offset into the debug strings section …\nReturns the contents of the read-only data section.\nReturns the size of the read-only data section.\nRuns the line program until the next region becomes …\nReturns the contents of the read-write data section.\nReturns the size of the read-write data section.\nReturns the initial size of the stack.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAligns the <code>value</code> to the next <code>page_size</code>, or returns the …\nAligns the <code>value</code> to the next <code>page_size</code>, or returns the …\nAligns the <code>value</code> to the next <code>page_size</code>, or returns the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe VM is busy.\nThe VM has triggered a host call and is idle.\nThe VM’s signal handler was triggered.\nThe VM has went through a single instruction is idle.\nThe VM has triggered a trap and is idle.\nThe VM is idle.\nThe address where the indirect jump table starts inside of …\nThe address where the return-to-host jump table vector …\nThe address where the native code starts inside of the VM.\nThe address of the top of the native stack.\nThe address of the native stack.\nThe size of the native stack.\nAddress where the shared memory is mapped.\nThe address of the signal stack.\nThe address of the global per-VM context struct.\nThe maximum number of native code bytes that can be …\nThe maximum number of bytes the jump table can be.\nThe maximum number of bytes the jump table can span in …\nThe maximum number of bytes the native code can be.\nThe size of the shared memory region.\nThe virtual machine context.\nA multipurpose field:\nPerformance counters. Only for debugging.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe futex used to synchronize the sandbox with the host …\nThe current gas counter.\nAddress to the base of the heap.\nThe state of the program’s heap.\nThe initial heap growth threshold.\nThe maximum heap size.\nOne-time args used during initialization.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the memory of the sandbox is dirty.\nAddress to which to jump to.\nA buffer used to marshal error messages.\nLength of the message in the message buffer.\nCreates a fresh VM context.\nThe address of the native code to call inside of the VM …\nThe address of the next instruction to be executed.\nThe page size.\nThe address of the instruction currently being executed.\nA dump of all of the registers of the VM.\nWhether sandboxing is disabled.\nLength this sandbox’s code.\nOffset in shared memory to this sandbox’s code.\nLength of sandbox’s jump table, in bytes.\nOffset in shared memory to this sandbox’s jump table.\nNumber of maps to map.\nOffset in shared memory to this sandbox’s memory map.\nAddress of the sysreturn routine.\nWhether userfaultfd-based memory management is enabled.\nCreates a zeroed VM context.")