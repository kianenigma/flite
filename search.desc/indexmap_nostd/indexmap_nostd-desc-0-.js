searchState.loadedDescShard("indexmap_nostd", 0, "Disclaimer\nAn ordered map based on a B-Tree that keeps insertion …\nAn ordered set based on a B-Tree that keeps insertion …\nA view into a single entry in a map, which may either be …\nA b-tree map where the iteration order of the key-value …\nAn owning iterator over the entries of a <code>IndexMap</code>.\nAn iterator over the entries of an <code>IndexMap</code>.\nA mutable iterator over the entries of an <code>IndexMap</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>IndexMap</code>. It is part of …\nA vacant entry.\nA view into a vacant entry in an <code>IndexMap</code>. It is part of …\nAn iterator over the values of an <code>IndexMap</code>.\nAn iterator over the values of an <code>IndexMap</code>.\nProvides in-place mutable access to an occupied entry …\nClears the map, removing all elements.\nReturns true if the map contains a value for the specified …\nGets the given key’s corresponding entry in the map for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to the value in the entry.\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nReturns a shared reference to the key-value pair at the …\nReturns an exclusive reference to the key-value pair at …\nReturns the unique index corresponding to the supplied key.\nReturns the key-value pair corresponding to the supplied …\nGets a mutable reference to the value in the entry.\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the <code>OccupiedEntry</code>’s key,\nInserts a key-value pair into the map.\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the key.\nConverts the entry into a mutable reference to its value.\nReturns <code>true</code> if the map contains no elements.\nGets an iterator over the entries of the map, sorted by …\nGets a mutable iterator over the entries of the map, …\nReturns a reference to this entry’s key.\nGets a reference to the key that would be used when …\nGets a reference to the key in the entry.\nReturns the number of elements in the map.\nMakes a new, empty <code>IndexMap</code>.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nReserve capacity for at least <code>additional</code> more key-value …\nGets an iterator over the values of the map, in order by …\nGets a mutable iterator over the values of the map, in …\nConstructs a new, empty <code>IndexMap</code> with at least the …\nA b-tree set where the iteration order of the values is …\nAn owning iterator over the items of a <code>IndexSet</code>.\nAn iterator over the items of a <code>IndexSet</code>.\nClears the set, removing all elements.\nReturns <code>true</code> if the set contains an element equal to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the element in the set, if any, …\nReturns the index-value pair corresponding to the supplied …\nReturns a shared reference to the value at the given index.\nReturns the unique index corresponding to the supplied …\nAdds a value to the set.\nAdds a value to the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nGets an iterator that visits the elements in the <code>IndexSet</code> …\nReturns the number of elements in the set.\nMakes a new, empty <code>IndexSet</code>.\nReserve capacity for at least <code>additional</code> more values.\nConstructs a new, empty <code>IndexSet</code> with at least the …")