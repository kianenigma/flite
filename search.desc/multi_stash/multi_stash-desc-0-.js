searchState.loadedDescShard("multi_stash", 0, "An iterator that moves out of a <code>MultiStash</code>.\nImmutable <code>MultiStash</code> iterator.\nMutable <code>MultiStash</code> iterator.\nAllows to access elements stored in a <code>MultiStash</code>.\nA vector-like data structure that is able to reuse slots …\nBumps the amount of items of the element at <code>key</code> if any.\nReturns the total number of elements the <code>MultiStash</code> can …\nClears the <code>MultiStash</code>, removing all elements.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to an element at the <code>key</code> if any.\nReturns a mutable reference to an element at the <code>key</code> if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>MultiStash</code> contains no elements.\nReturns an iterator over the elements of the <code>MultiStash</code>.\nReturns an iterator over the elements of the <code>MultiStash</code>.\nReturns the number of elements in the <code>MultiStash</code>.\nReturns the number of items in the <code>MultiStash</code>.\nConstruct a new, empty <code>MultiStash</code>.\nPuts an <code>amount</code> of <code>item</code> into the <code>MultiStash</code>.\nReserves capacity for at least <code>additional</code> more elements to …\nReserves the minimum capacity for at least <code>additional</code> more …\nRemoves and returns the <code>element</code> at <code>key</code> and its amount of …\nReturns a single item of the <code>element</code> at <code>key</code> and the amount …\nConstructs a new, empty <code>MultiStash</code> with at least the …")