searchState.loadedDescShard("ssz_rs", 0, "An implementation of the SSZ serialization scheme.\nThe buffer contained more data than expected.\nA homogenous collection of a variable number of boolean …\nA homogenous collection of a fixed number of boolean …\nThe number of elements exceeded the maximum expected …\nA data structure that can be deserialized using SSZ.\nA deserialization error.\nDeserialization errors.\nThe number of elements did not match (<code>provided != required</code>)\nMore data was expected to be in the buffer.\nMore data was provided than expected\nAn invalid value.\nAn invalid value.\nA type is invalid for the given bounds.\nAn invalid byte was encountered when deserializing the …\nAn invalid instance was encountered.\nAn invalid instance was encountered.\nThe number of bytes used for length offsets wasn’t a …\nAn invalid type was encountered.\nAn invalid type was encountered.\nA homogenous collection of a variable number of values.\nThe encoded length was at least as big as the maximum …\nA merkleization error.\nAn error encountered during merkleization.\nA <code>Merkleized</code> type provides a “hash tree root” …\nA node in a merkle tree.\nAn offset was found with start &gt; end.\nAn error serializing a type while computing the hash tree.\nA data structure that can be serialized using SSZ.\nA serialization error.\nSerialization errors.\n<code>SimpleSerialize</code> is a trait for types conforming to the SSZ …\nTop-level error to wrap all other errors in this crate\n<code>Sized</code> is a trait for types that can provide sizing …\nAn invalid type.\nAn invalid type.\nAn unsigned integer represented by 256 bits\nA homogenous collection of a fixed number of values. NOTE: …\n<code>deserialize</code> is a convenience function for taking an …\nDeserialize this value from the given SSZ-encoded buffer.\nCompute the “hash tree root” of <code>Self</code>.\n<code>is_valid_merkle_branch</code> verifies the Merkle proof against …\nThe <code>prelude</code> contains common traits and types a user of …\n<code>serialize</code> is a convenience function for taking a value that\nAppend an encoding of <code>self</code> to the <code>buffer</code>.\nThe buffer contained more data than expected.\nA homogenous collection of a variable number of boolean …\nA homogenous collection of a fixed number of boolean …\nThe number of elements exceeded the maximum expected …\nA data structure that can be deserialized using SSZ.\nA deserialization error.\nDeserialization errors.\nThe number of elements did not match (<code>provided != required</code>)\nMore data was expected to be in the buffer.\nMore data was provided than expected\nAn invalid value.\nAn invalid value.\nA type is invalid for the given bounds.\nAn invalid byte was encountered when deserializing the …\nAn invalid instance was encountered.\nAn invalid instance was encountered.\nThe number of bytes used for length offsets wasn’t a …\nAn invalid type was encountered.\nAn invalid type was encountered.\nA homogenous collection of a variable number of values.\nThe encoded length was at least as big as the maximum …\nA merkleization error.\nAn error encountered during merkleization.\nA <code>Merkleized</code> type provides a “hash tree root” …\nA node in a merkle tree.\nAn offset was found with start &gt; end.\nAn error serializing a type while computing the hash tree.\nA data structure that can be serialized using SSZ.\nA serialization error.\nSerialization errors.\nTop-level error to wrap all other errors in this crate\nAn invalid type.\nAn invalid type.\nAn unsigned integer represented by 256 bits\nA homogenous collection of a fixed number of values. NOTE: …\n<code>deserialize</code> is a convenience function for taking an …\nDeserialize this value from the given SSZ-encoded buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the bit at <code>index</code>. <code>None</code> if index is out-of-bounds.\nReturn the bit at <code>index</code>. <code>None</code> if index is out-of-bounds.\nCompute the “hash tree root” of <code>Self</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>is_valid_merkle_branch</code> verifies the Merkle proof against …\n<code>serialize</code> is a convenience function for taking a value that\nAppend an encoding of <code>self</code> to the <code>buffer</code>.\nSet the bit at <code>index</code> to <code>value</code>. Return the previous value …\nSet the bit at <code>index</code> to <code>value</code>. Return the previous value …")