(function() {
    var type_impls = Object.fromEntries([["pallet_xcm_bridge_hub",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ExportXcm-for-HaulBlobExporter%3CBridge,+BridgedNetwork,+DestinationVersion,+Price%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/staging_xcm_builder/universal_exports.rs.html#455-460\">source</a><a href=\"#impl-ExportXcm-for-HaulBlobExporter%3CBridge,+BridgedNetwork,+DestinationVersion,+Price%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Bridge, BridgedNetwork, DestinationVersion, Price&gt; <a class=\"trait\" href=\"staging_xcm_executor/traits/export/trait.ExportXcm.html\" title=\"trait staging_xcm_executor::traits::export::ExportXcm\">ExportXcm</a> for <a class=\"struct\" href=\"staging_xcm_builder/universal_exports/struct.HaulBlobExporter.html\" title=\"struct staging_xcm_builder::universal_exports::HaulBlobExporter\">HaulBlobExporter</a>&lt;Bridge, BridgedNetwork, DestinationVersion, Price&gt;<div class=\"where\">where\n    Bridge: <a class=\"trait\" href=\"staging_xcm_builder/universal_exports/trait.HaulBlob.html\" title=\"trait staging_xcm_builder::universal_exports::HaulBlob\">HaulBlob</a>,\n    BridgedNetwork: <a class=\"trait\" href=\"bounded_collections/trait.Get.html\" title=\"trait bounded_collections::Get\">Get</a>&lt;<a class=\"struct\" href=\"staging_xcm/v4/location/struct.Location.html\" title=\"struct staging_xcm::v4::location::Location\">Location</a>&gt;,\n    DestinationVersion: <a class=\"trait\" href=\"staging_xcm/trait.GetVersion.html\" title=\"trait staging_xcm::GetVersion\">GetVersion</a>,\n    Price: <a class=\"trait\" href=\"bounded_collections/trait.Get.html\" title=\"trait bounded_collections::Get\">Get</a>&lt;<a class=\"struct\" href=\"staging_xcm/v4/asset/struct.Assets.html\" title=\"struct staging_xcm::v4::asset::Assets\">Assets</a>&gt;,</div></h3></section></summary><div class=\"docblock\"><p><code>ExportXcm</code> implementation for <code>HaulBlobExporter</code>.</p>\n<h4 id=\"type-parameters\"><a class=\"doc-anchor\" href=\"#type-parameters\">§</a>Type Parameters</h4><div class=\"example-wrap\"><pre class=\"language-text\"><code>- Bridge: Implements `HaulBlob`.\n- BridgedNetwork: The relative location of the bridged consensus system with the expected `GlobalConsensus` junction.\n- DestinationVersion: Implements `GetVersion` for retrieving XCM version for the destination.\n- Price: potential fees for exporting.\n</code></pre></div></div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Ticket\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/staging_xcm_builder/universal_exports.rs.html#462\">source</a><a href=\"#associatedtype.Ticket\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"staging_xcm_executor/traits/export/trait.ExportXcm.html#associatedtype.Ticket\" class=\"associatedtype\">Ticket</a> = (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>])</h4></section></summary><div class='docblock'>Intermediate value which connects the two phases of the export operation.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.validate\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/staging_xcm_builder/universal_exports.rs.html#464-470\">source</a><a href=\"#method.validate\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"staging_xcm_executor/traits/export/trait.ExportXcm.html#tymethod.validate\" class=\"fn\">validate</a>(\n    network: <a class=\"enum\" href=\"staging_xcm/v4/junction/enum.NetworkId.html\" title=\"enum staging_xcm::v4::junction::NetworkId\">NetworkId</a>,\n    _channel: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n    universal_source: &amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"staging_xcm/v4/junctions/enum.Junctions.html\" title=\"enum staging_xcm::v4::junctions::Junctions\">Junctions</a>&gt;,\n    destination: &amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"staging_xcm/v4/junctions/enum.Junctions.html\" title=\"enum staging_xcm::v4::junctions::Junctions\">Junctions</a>&gt;,\n    message: &amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"staging_xcm/v4/struct.Xcm.html\" title=\"struct staging_xcm::v4::Xcm\">Xcm</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;((<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>]), <a class=\"struct\" href=\"staging_xcm/v4/asset/struct.Assets.html\" title=\"struct staging_xcm::v4::asset::Assets\">Assets</a>), <a class=\"enum\" href=\"staging_xcm/v3/traits/enum.SendError.html\" title=\"enum staging_xcm::v3::traits::SendError\">SendError</a>&gt;</h4></section></summary><div class='docblock'>Check whether the given <code>message</code> is deliverable to the given <code>destination</code> on <code>network</code>,\nspoofing its source as <code>universal_source</code> and if so determine the cost which will be paid by\nthis chain to do so, returning a <code>Ticket</code> token which can be used to enact delivery. <a href=\"staging_xcm_executor/traits/export/trait.ExportXcm.html#tymethod.validate\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deliver\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/staging_xcm_builder/universal_exports.rs.html#530\">source</a><a href=\"#method.deliver\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"staging_xcm_executor/traits/export/trait.ExportXcm.html#tymethod.deliver\" class=\"fn\">deliver</a>(_: (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>])) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.array.html\">32</a>], <a class=\"enum\" href=\"staging_xcm/v3/traits/enum.SendError.html\" title=\"enum staging_xcm::v3::traits::SendError\">SendError</a>&gt;</h4></section></summary><div class='docblock'>Actually carry out the delivery operation for a previously validated message sending. <a href=\"staging_xcm_executor/traits/export/trait.ExportXcm.html#tymethod.deliver\">Read more</a></div></details></div></details>","ExportXcm","pallet_xcm_bridge_hub::exporter::PalletAsHaulBlobExporter"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[8141]}